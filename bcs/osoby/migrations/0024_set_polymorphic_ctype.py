# Generated by Django 5.2.1 on 2025-07-28 17:14
from django.core.exceptions import FieldDoesNotExist
from django.db import migrations


def set_polymorphic_ctype_for_all(apps, schema_editor):
    ContentType = apps.get_model("contenttypes", "ContentType")
    Byt = apps.get_model("osoby", "Byt")

    db_alias = schema_editor.connection.alias

    osoby_cts = ContentType.objects.using(db_alias).filter(app_label="osoby")

    for ct in osoby_cts:
        try:
            model = apps.get_model("osoby", ct.model)
            print("model", model)
        except LookupError:
            continue  # skip if model doesn't exist in historical context

        if model.__name__.lower() == "byt":
            continue

        # Skip if model has no byt_ptr_id field
        try:
            model._meta.get_field("byt_ptr")
        except FieldDoesNotExist:
            continue

        byt_ids = model.objects.using(db_alias).values_list(
            "byt_ptr_id", flat=True
        )
        Byt.objects.using(db_alias).filter(id__in=byt_ids).update(
            polymorphic_ctype_id=ct.id
        )


class Migration(migrations.Migration):

    dependencies = [
        (
            "osoby",
            "0023_remove_osoba_id_remove_osoba_polymorphic_ctype_and_more",
        ),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.RunPython(set_polymorphic_ctype_for_all),
    ]
